{"version":3,"sources":["BooksAPI.js","Components/Book.js","Components/ListBooks.js","Components/Bookshelf.js","Components/Search.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","update","book","shelf","fetch","concat","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","then","res","json","search","query","data","books","Book","onUpdateBookShelf","evt","preventDefault","_this","props","target","value","this","react_default","a","createElement","className","style","width","height","backgroundImage","image","undefined","onChange","disabled","title","author","Component","ListBooks","bookshelf","_this2","length","map","key","Components_Book","imageLinks","thumbnail","authors","Bookshelf","Components_ListBooks","Search","state","onSearch","BooksAPI","response","filter","b","setState","catch","err","console","log","Link","to","lib","react_throttle_lib","time","handler","type","placeholder","BooksApp","loaded","currState","myBook","toast","success","shelves","description","Route","exact","path","process","render","Components_Bookshelf","filterShelf","Components_Search","React","ReactDOM","BrowserRouter","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.3a83eca5.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component } from \"react\";\nimport { func, shape, string, array } from \"prop-types\";\n\nclass Book extends Component {\n  static propTypes = {\n    onUpdateBookShelf: func.isRequired,\n    book: shape({\n      shelf: string\n    }),\n    title: string,\n    authors: array\n  };\n\n  onUpdateBookShelf = evt => {\n    evt.preventDefault();\n    this.props.onUpdateBookShelf(this.props.book, evt.target.value);\n  };\n  render() {\n    const { shelf } = this.props.book;\n    return (\n      <div className=\"book\">\n        <div className=\"book-top\">\n          <div\n            className=\"book-cover\"\n            style={{\n              width: 128,\n              height: 188,\n              backgroundImage: `url(${this.props.image})`\n            }}\n          />\n\n          <div className=\"book-shelf-changer\">\n            <select\n              value={shelf === undefined ? \"none\" : shelf}\n              onChange={this.onUpdateBookShelf}\n            >\n              <option value=\"move\" disabled>\n                Move to...\n              </option>\n              <option value=\"currentlyReading\">Currently Reading</option>\n              <option value=\"wantToRead\">Want to Read</option>\n              <option value=\"read\">Read</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n        </div>\n        <div className=\"book-title\">{this.props.title}</div>\n        <div className=\"book-authors\">{this.props.author}</div>\n      </div>\n    );\n  }\n}\n\nexport default Book;\n","import React, { Component } from \"react\";\nimport Book from \"./Book\";\nimport { func, array } from \"prop-types\";\n\nclass ListBooks extends Component {\n  static propTypes = {\n    onUpdateBookShelf: func.isRequired,\n    books: array.isRequired\n  };\n\n  onUpdateBookShelf = (book, bookshelf) => {\n    this.props.onUpdateBookShelf(book, bookshelf);\n  };\n\n  render() {\n    const { books } = this.props;\n    return (\n      <div>\n        <ol className=\"books-grid\">\n          {books.length > 0 ? (\n            books.map(book => {\n              return (\n                <li key={book.id}>\n                  <Book\n                    image={\n                      book.imageLinks !== undefined\n                        ? book.imageLinks.thumbnail\n                        : \"\"\n                    }\n                    title={book.title}\n                    author={book.authors}\n                    key={book.id}\n                    book={book}\n                    shelf={book.shelf}\n                    onUpdateBookShelf={this.onUpdateBookShelf}\n                  />\n                </li>\n              );\n            })\n          ) : (\n            <p>Sem resultado</p>\n          )}\n        </ol>\n      </div>\n    );\n  }\n}\n\nexport default ListBooks;\n","import React, { Component } from \"react\";\nimport ListBooks from \"./ListBooks\";\nimport { func, string } from \"prop-types\";\n\nclass Bookshelf extends Component {\n  static propTypes = {\n    onUpdateBookShelf: func.isRequired,\n    shelf: string\n  };\n\n  onUpdateBookShelf = (book, bookshelf) => {\n    this.props.onUpdateBookShelf(book, bookshelf);\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"bookshelf\">\n          <h2 className=\"bookshelf-title\">{this.props.shelf}</h2>\n          <div className=\"bookshelf-books\">\n            <ListBooks\n              books={this.props.books}\n              onUpdateBookShelf={this.onUpdateBookShelf}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Bookshelf;\n","import React, { Component } from \"react\";\nimport * as BooksAPI from \"../BooksAPI\";\nimport { Link } from \"react-router-dom\";\nimport ListBooks from \"./ListBooks\";\nimport { func, array } from \"prop-types\";\nimport { ToastContainer } from \"react-toastify\";\nimport { Throttle } from \"react-throttle\";\n\nclass Search extends Component {\n  static propTypes = {\n    onUpdateBookShelf: func.isRequired,\n    books: array\n  };\n\n  state = {\n    books: []\n  };\n\n  onSearch = evt => {\n    if (evt.target.value === \"\") return false;\n    BooksAPI.search(evt.target.value)\n      .then(response => {\n        response.map(book =>\n          this.props.books\n            .filter(b => b.id === book.id)\n            .map(b => (book.shelf = b.shelf))\n        );\n        this.setState({ books: response });\n      })\n      .catch(err => console.log(err));\n  };\n\n  render() {\n    return (\n      <div className=\"search-books\">\n        <div className=\"search-books-bar\">\n          <Link to=\"/\" className=\"close-search\">\n            Close\n          </Link>\n          <div className=\"search-books-input-wrapper\">\n            <ToastContainer />\n            <Throttle time=\"500\" handler=\"onChange\">\n              <input\n                type=\"text\"\n                placeholder=\"Search by title or author\"\n                onChange={this.onSearch}\n              />\n            </Throttle>\n          </div>\n        </div>\n        <div className=\"search-books-results\">\n          <ListBooks\n            books={this.state.books}\n            onUpdateBookShelf={this.props.onUpdateBookShelf}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n\n/*\n  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n  You can find these search terms here:\n  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n  you don't find a specific author or title. Every search is limited by search terms.*/\n","import React from \"react\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport \"./App.css\";\nimport Bookshelf from \"./Components/Bookshelf\";\nimport Search from \"./Components/Search\";\nimport { Route, Link } from \"react-router-dom\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nclass BooksApp extends React.Component {\n  state = {\n    books: [],\n    loaded: false\n  };\n\n  async componentDidMount() {\n    const books = await BooksAPI.getAll();\n    this.setState({ books, loaded: true });\n  }\n\n  filterShelf(shelf) {\n    const { books } = this.state;\n    return books.filter(book => {\n      return book.shelf === shelf;\n    });\n  }\n\n  onUpdateBookShelf = (book, bookshelf) => {\n    if (this.state.books) {\n      BooksAPI.update(book, bookshelf).then(() => {\n        book.shelf = bookshelf;\n        this.setState(currState => ({\n          books: currState.books\n            .filter(myBook => myBook.id !== book.id)\n            .concat([book])\n        }));\n      });\n      toast.success(`📚 Book '${book.title}' updated!`);\n    }\n  };\n\n  render() {\n    const { loaded } = this.state;\n    const shelves = [\"currentlyReading\", \"read\", \"wantToRead\"];\n    let description = \"\";\n    return (\n      <div className=\"app\">\n        <Route\n          exact\n          path={process.env.PUBLIC_URL + \"/\"}\n          render={() => (\n            <div className=\"list-books\">\n              <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n                <ToastContainer />\n              </div>\n              <div className=\"list-books-content\">\n                <div>\n                  {loaded ? (\n                    shelves.map(shelf => {\n                      if (shelf === \"currentlyReading\") {\n                        description = \"Currently Reading\";\n                      } else if (shelf === \"read\") {\n                        description = \"Read\";\n                      } else if (shelf === \"wantToRead\") {\n                        description = \"Want To Read\";\n                      }\n                      return (\n                        <Bookshelf\n                          shelf={description}\n                          books={this.filterShelf(shelf)}\n                          key={shelf}\n                          onUpdateBookShelf={this.onUpdateBookShelf}\n                        />\n                      );\n                    })\n                  ) : (\n                    <p>Carregando...</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n        />\n        <div className=\"open-search\">\n          <Link to=\"/search\" className=\"open-search\">\n            <button>Add a book</button>\n          </Link>\n        </div>\n        <Route\n          path={process.env.PUBLIC_URL + \"/search\"}\n          render={() => (\n            <Search\n              books={this.state.books}\n              onUpdateBookShelf={this.onUpdateBookShelf}\n            />\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<BrowserRouter>\n                    <App />\n                </BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}